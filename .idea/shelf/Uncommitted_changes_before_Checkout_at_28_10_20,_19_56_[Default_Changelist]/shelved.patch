Index: asteroids.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\"\"\"\r\nAsteroid Smasher\r\n\r\nShoot space rocks in this demo program created with\r\nPython and the Arcade library.\r\n\r\nArtwork from http://kenney.nl\r\ntest \r\n\r\nIf Python and Arcade are installed, this example can be run from the command line with:\r\npython -m arcade.examples.asteroid_smasher\r\n\"\"\"\r\nimport random\r\nimport math\r\nimport arcade\r\nimport os\r\n\r\n\r\nfrom typing import cast\r\n\r\nSTARTING_ASTEROID_COUNT = 3\r\nSCALE = 0.5\r\nOFFSCREEN_SPACE = 300\r\nSCREEN_WIDTH = 800\r\nSCREEN_HEIGHT = 600\r\nSCREEN_TITLE = \"Asteroid Smasher\"\r\nLEFT_LIMIT = -OFFSCREEN_SPACE\r\nRIGHT_LIMIT = SCREEN_WIDTH + OFFSCREEN_SPACE\r\nBOTTOM_LIMIT = -OFFSCREEN_SPACE\r\nTOP_LIMIT = SCREEN_HEIGHT + OFFSCREEN_SPACE\r\n\r\n\r\nclass TurningSprite(arcade.Sprite):\r\n    \"\"\" Sprite that sets its angle to the direction it is traveling in. \"\"\"\r\n    def update(self):\r\n        \"\"\" Move the sprite \"\"\"\r\n        super().update()\r\n        self.angle = math.degrees(math.atan2(self.change_y, self.change_x))\r\n\r\n\r\nclass ShipSprite(arcade.Sprite):\r\n    \"\"\"\r\n    Sprite that represents our space ship.\r\n\r\n    Derives from arcade.Sprite.\r\n    \"\"\"\r\n    def __init__(self, filename, scale):\r\n        \"\"\" Set up the space ship. \"\"\"\r\n\r\n        # Call the parent Sprite constructor\r\n        super().__init__(filename, scale)\r\n\r\n        # Info on where we are going.\r\n        # Angle comes in automatically from the parent class.\r\n        self.thrust = 0\r\n        self.speed = 0\r\n        self.max_speed = 4\r\n        self.drag = 0.05\r\n        self.respawning = 0\r\n\r\n        # Mark that we are respawning.\r\n        self.respawn()\r\n\r\n    def respawn(self):\r\n        \"\"\"\r\n        Called when we die and need to make a new ship.\r\n        'respawning' is an invulnerability timer.\r\n        \"\"\"\r\n        # If we are in the middle of respawning, this is non-zero.\r\n        self.respawning = 1\r\n        self.center_x = SCREEN_WIDTH / 2\r\n        self.center_y = SCREEN_HEIGHT / 2\r\n        self.angle = 0\r\n\r\n    def update(self):\r\n        \"\"\"\r\n        Update our position and other particulars.\r\n        \"\"\"\r\n        if self.respawning:\r\n            self.respawning += 1\r\n            self.alpha = self.respawning\r\n            if self.respawning > 250:\r\n                self.respawning = 0\r\n                self.alpha = 255\r\n        if self.speed > 0:\r\n            self.speed -= self.drag\r\n            if self.speed < 0:\r\n                self.speed = 0\r\n\r\n        if self.speed < 0:\r\n            self.speed += self.drag\r\n            if self.speed > 0:\r\n                self.speed = 0\r\n\r\n        self.speed += self.thrust\r\n        if self.speed > self.max_speed:\r\n            self.speed = self.max_speed\r\n        if self.speed < -self.max_speed:\r\n            self.speed = -self.max_speed\r\n\r\n        self.change_x = -math.sin(math.radians(self.angle)) * self.speed\r\n        self.change_y = math.cos(math.radians(self.angle)) * self.speed\r\n\r\n        self.center_x += self.change_x\r\n        self.center_y += self.change_y\r\n\r\n        # If the ship goes off-screen, move it to the other side of the window\r\n        if self.right < 0:\r\n            self.left = SCREEN_WIDTH\r\n\r\n        if self.left > SCREEN_WIDTH:\r\n            self.right = 0\r\n\r\n        if self.bottom < 0:\r\n            self.top = SCREEN_HEIGHT\r\n\r\n        if self.top > SCREEN_HEIGHT:\r\n            self.bottom = 0\r\n\r\n        \"\"\" Call the parent class. \"\"\"\r\n        super().update()\r\n\r\n\r\nclass AsteroidSprite(arcade.Sprite):\r\n    \"\"\" Sprite that represents an asteroid. \"\"\"\r\n\r\n    def __init__(self, image_file_name, scale):\r\n        super().__init__(image_file_name, scale=scale)\r\n        self.size = 0\r\n\r\n    def update(self):\r\n        \"\"\" Move the asteroid around. \"\"\"\r\n        super().update()\r\n        if self.center_x < LEFT_LIMIT:\r\n            self.center_x = RIGHT_LIMIT\r\n        if self.center_x > RIGHT_LIMIT:\r\n            self.center_x = LEFT_LIMIT\r\n        if self.center_y > TOP_LIMIT:\r\n            self.center_y = BOTTOM_LIMIT\r\n        if self.center_y < BOTTOM_LIMIT:\r\n            self.center_y = TOP_LIMIT\r\n\r\n\r\nclass MyGame(arcade.Window):\r\n    \"\"\" Main application class. \"\"\"\r\n\r\n    def __init__(self):\r\n        super().__init__(SCREEN_WIDTH, SCREEN_HEIGHT, SCREEN_TITLE)\r\n\r\n        # Set the working directory (where we expect to find files) to the same\r\n        # directory this .py file is in. You can leave this out of your own\r\n        # code, but it is needed to easily run the examples using \"python -m\"\r\n        # as mentioned at the top of this program.\r\n        file_path = os.path.dirname(os.path.abspath(__file__))\r\n        os.chdir(file_path)\r\n\r\n        self.frame_count = 0\r\n\r\n        self.game_over = False\r\n\r\n        # Sprite lists\r\n        self.player_sprite_list = arcade.SpriteList()\r\n        self.asteroid_list = arcade.SpriteList()\r\n        self.bullet_list = arcade.SpriteList()\r\n\r\n        # Set up the player\r\n        self.score = 0\r\n        self.player_sprite = None\r\n        self.lives = 0\r\n\r\n        # Sounds\r\n        # TODO: load sounds\r\n\r\n    def start_new_game(self):\r\n        \"\"\" Set up the game and initialize the variables. \"\"\"\r\n\r\n        self.frame_count = 0\r\n        self.game_over = False\r\n\r\n        # Sprite lists\r\n        self.player_sprite_list = arcade.SpriteList()\r\n        self.asteroid_list = arcade.SpriteList()\r\n        self.bullet_list = arcade.SpriteList()\r\n\r\n        # Set up the player\r\n        self.score = 0\r\n        self.player_sprite = ShipSprite(\"Adilette_1.png\", SCALE)\r\n        self.player_sprite_list.append(self.player_sprite)\r\n        self.lives = 0\r\n\r\n        # ToDo: Set up the little icons that represent the player lives.\r\n\r\n        # Make the asteroids\r\n        image_list = (\"Potato2.png\",\r\n                      \"Potato1.png\",\r\n                      \"Potato3.png\",\r\n                      \"Potato4.png\")\r\n        for i in range(STARTING_ASTEROID_COUNT):\r\n            image_no = random.randrange(4)\r\n            enemy_sprite = AsteroidSprite(image_list[image_no], SCALE)\r\n            enemy_sprite.guid = \"Asteroid\"\r\n\r\n            enemy_sprite.center_y = random.randrange(BOTTOM_LIMIT, TOP_LIMIT)\r\n            enemy_sprite.center_x = random.randrange(LEFT_LIMIT, RIGHT_LIMIT)\r\n\r\n            enemy_sprite.change_x = random.random() * 2 - 1\r\n            enemy_sprite.change_y = random.random() * 2 - 1\r\n\r\n            enemy_sprite.change_angle = (random.random() - 0.5) * 2\r\n            enemy_sprite.size = 4\r\n            self.asteroid_list.append(enemy_sprite)\r\n\r\n    def on_draw(self):\r\n        \"\"\"\r\n        Render the screen.\r\n        \"\"\"\r\n\r\n        # This command has to happen before we start drawing\r\n        arcade.start_render()\r\n\r\n        # Draw all the sprites.\r\n        self.asteroid_list.draw()\r\n        self.bullet_list.draw()\r\n        self.player_sprite_list.draw()\r\n\r\n        # Put the text on the screen.\r\n        output = f\"Score: {self.score}\"\r\n        arcade.draw_text(output, 10, 70, arcade.color.WHITE, 13)\r\n\r\n        output = f\"Asteroid Count: {len(self.asteroid_list)}\"\r\n        arcade.draw_text(output, 10, 50, arcade.color.WHITE, 13)\r\n\r\n    def on_key_press(self, symbol, modifiers):\r\n        \"\"\" Called whenever a key is pressed. \"\"\"\r\n        if not self.player_sprite.respawning and symbol == arcade.key.SPACE:\r\n            # TODO: # Shoot if the player hit the space bar and we aren't respawning.\r\n            pass\r\n\r\n        if symbol == arcade.key.LEFT:\r\n            self.player_sprite.change_angle = 3\r\n        elif symbol == arcade.key.RIGHT:\r\n            self.player_sprite.change_angle = -3\r\n        elif symbol == arcade.key.UP:\r\n            self.player_sprite.thrust = 0.15\r\n        elif symbol == arcade.key.DOWN:\r\n            self.player_sprite.thrust = -.2\r\n\r\n    def on_key_release(self, symbol, modifiers):\r\n        \"\"\" Called whenever a key is released. \"\"\"\r\n        if symbol == arcade.key.LEFT:\r\n            self.player_sprite.change_angle = 0\r\n        elif symbol == arcade.key.RIGHT:\r\n            self.player_sprite.change_angle = 0\r\n        elif symbol == arcade.key.UP:\r\n            self.player_sprite.thrust = 0\r\n        elif symbol == arcade.key.DOWN:\r\n            self.player_sprite.thrust = 0\r\n\r\n    def split_asteroid(self, asteroid: AsteroidSprite):\r\n        \"\"\" Split an asteroid into chunks. \"\"\"\r\n        x = asteroid.center_x\r\n        y = asteroid.center_y\r\n        self.score += 1\r\n\r\n        if asteroid.size == 4:\r\n            for i in range(3):\r\n                image_no = random.randrange(2)\r\n                image_list = [\":resources:images/space_shooter/meteorGrey_med1.png\",\r\n                              \":resources:images/space_shooter/meteorGrey_med2.png\"]\r\n\r\n                enemy_sprite = AsteroidSprite(image_list[image_no],\r\n                                              SCALE * 1.5)\r\n\r\n                enemy_sprite.center_y = y\r\n                enemy_sprite.center_x = x\r\n\r\n                enemy_sprite.change_x = random.random() * 2.5 - 1.25\r\n                enemy_sprite.change_y = random.random() * 2.5 - 1.25\r\n\r\n                enemy_sprite.change_angle = (random.random() - 0.5) * 2\r\n                enemy_sprite.size = 3\r\n\r\n                self.asteroid_list.append(enemy_sprite)\r\n\r\n        elif asteroid.size == 3:\r\n            for i in range(3):\r\n                image_no = random.randrange(2)\r\n                image_list = [\":resources:images/space_shooter/meteorGrey_small1.png\",\r\n                              \":resources:images/space_shooter/meteorGrey_small2.png\"]\r\n\r\n                enemy_sprite = AsteroidSprite(image_list[image_no],\r\n                                              SCALE * 1.5)\r\n\r\n                enemy_sprite.center_y = y\r\n                enemy_sprite.center_x = x\r\n\r\n                enemy_sprite.change_x = random.random() * 3 - 1.5\r\n                enemy_sprite.change_y = random.random() * 3 - 1.5\r\n\r\n                enemy_sprite.change_angle = (random.random() - 0.5) * 2\r\n                enemy_sprite.size = 2\r\n\r\n                self.asteroid_list.append(enemy_sprite)\r\n\r\n        elif asteroid.size == 2:\r\n            for i in range(3):\r\n                image_no = random.randrange(2)\r\n                image_list = [\":resources:images/space_shooter/meteorGrey_tiny1.png\",\r\n                              \":resources:images/space_shooter/meteorGrey_tiny2.png\"]\r\n\r\n                enemy_sprite = AsteroidSprite(image_list[image_no],\r\n                                              SCALE * 1.5)\r\n\r\n                enemy_sprite.center_y = y\r\n                enemy_sprite.center_x = x\r\n\r\n                enemy_sprite.change_x = random.random() * 3.5 - 1.75\r\n                enemy_sprite.change_y = random.random() * 3.5 - 1.75\r\n\r\n                enemy_sprite.change_angle = (random.random() - 0.5) * 2\r\n                enemy_sprite.size = 1\r\n\r\n                self.asteroid_list.append(enemy_sprite)\r\n\r\n        elif asteroid.size == 1:\r\n            pass\r\n\r\n    def on_update(self, x):\r\n        \"\"\" Move everything \"\"\"\r\n\r\n        self.frame_count += 1\r\n\r\n        if not self.game_over:\r\n            self.asteroid_list.update()\r\n            self.player_sprite_list.update()\r\n\r\n            if not self.player_sprite.respawning:\r\n                asteroids = arcade.check_for_collision_with_list(self.player_sprite, self.asteroid_list)\r\n                if len(asteroids) > 0:\r\n                    if self.lives > 0:\r\n                        self.lives -= 1\r\n                        self.player_sprite.respawn()\r\n                        self.split_asteroid(cast(AsteroidSprite, asteroids[0]))\r\n                        asteroids[0].remove_from_sprite_lists()\r\n                        print(\"Crash\")\r\n                    else:\r\n                        self.game_over = True\r\n                        print(\"Game over\")\r\n\r\n\r\ndef main():\r\n    \"\"\" Start the game \"\"\"\r\n    window = MyGame()\r\n    window.start_new_game()\r\n    arcade.run()\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    main()\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- asteroids.py	(revision 1bc2b89efe70e124257f01bfe67621bb2137adbd)
+++ asteroids.py	(date 1603911355639)
@@ -18,7 +18,7 @@
 
 from typing import cast
 
-STARTING_ASTEROID_COUNT = 3
+STARTING_ASTEROID_COUNT = 25
 SCALE = 0.5
 OFFSCREEN_SPACE = 300
 SCREEN_WIDTH = 800
Index: .idea/inspectionProfiles/profiles_settings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/inspectionProfiles/profiles_settings.xml	(date 1603911343768)
+++ .idea/inspectionProfiles/profiles_settings.xml	(date 1603911343768)
@@ -0,0 +1,6 @@
+<component name="InspectionProjectProfileManager">
+  <settings>
+    <option name="USE_PROJECT_PROFILE" value="false" />
+    <version value="1.0" />
+  </settings>
+</component>
\ No newline at end of file
Index: .idea/modules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/modules.xml	(date 1603911343756)
+++ .idea/modules.xml	(date 1603911343756)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectModuleManager">
+    <modules>
+      <module fileurl="file://$PROJECT_DIR$/.idea/Asteroids_Team_AllMann.iml" filepath="$PROJECT_DIR$/.idea/Asteroids_Team_AllMann.iml" />
+    </modules>
+  </component>
+</project>
\ No newline at end of file
Index: .idea/Asteroids_Team_AllMann.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/Asteroids_Team_AllMann.iml	(date 1603911343749)
+++ .idea/Asteroids_Team_AllMann.iml	(date 1603911343749)
@@ -0,0 +1,12 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="PYTHON_MODULE" version="4">
+  <component name="NewModuleRootManager">
+    <content url="file://$MODULE_DIR$" />
+    <orderEntry type="inheritedJdk" />
+    <orderEntry type="sourceFolder" forTests="false" />
+  </component>
+  <component name="PyDocumentationSettings">
+    <option name="format" value="PLAIN" />
+    <option name="myDocStringFormat" value="Plain" />
+  </component>
+</module>
\ No newline at end of file
Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/vcs.xml	(date 1603911343773)
+++ .idea/vcs.xml	(date 1603911343773)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="$PROJECT_DIR$" vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
