Index: asteroids.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\"\"\"\nAsteroid Smasher\n\nShoot space rocks in this demo program created with\nPython and the Arcade library.\n\nArtwork from http://kenney.nl\n\nIf Python and Arcade are installed, this example can be run from the command line with:\npython -m arcade.examples.asteroid_smasher\n\"\"\"\nimport random\nimport math\nimport arcade\nimport os\n\n\"\"\"Julius\"\"\"\n\"\"\"Lea\"\"\"\n\"\"\"Laura\"\"\"\n\"\"\"Merle\"\"\"\n\"\"\"Merle\"\"\"\n\"\"\"Basti\"\"\"\n\"\"\"Annika\"\"\"\n\"\"\"Valentina\"\"\"\n\n\nfrom typing import cast\n\nSTARTING_ASTEROID_COUNT = 3\nSCALE = 0.5\nOFFSCREEN_SPACE = 300\nSCREEN_WIDTH = 800\nSCREEN_HEIGHT = 600\nSCREEN_TITLE = \"Asteroid Smasher\"\nLEFT_LIMIT = -OFFSCREEN_SPACE\nRIGHT_LIMIT = SCREEN_WIDTH + OFFSCREEN_SPACE\nBOTTOM_LIMIT = -OFFSCREEN_SPACE\nTOP_LIMIT = SCREEN_HEIGHT + OFFSCREEN_SPACE\n\n\nclass TurningSprite(arcade.Sprite):\n    \"\"\" Sprite that sets its angle to the direction it is traveling in. \"\"\"\n    def update(self):\n        \"\"\" Move the sprite \"\"\"\n        super().update()\n        self.angle = math.degrees(math.atan2(self.change_y, self.change_x))\n\n\nclass ShipSprite(arcade.Sprite):\n    \"\"\"\n    Sprite that represents our space ship.\n\n    Derives from arcade.Sprite.\n    \"\"\"\n    def __init__(self, filename, scale):\n        \"\"\" Set up the space ship. \"\"\"\n\n        # Call the parent Sprite constructor\n        super().__init__(filename, scale)\n\n        # Info on where we are going.\n        # Angle comes in automatically from the parent class.\n        self.thrust = 0\n        self.speed = 0\n        self.max_speed = 4\n        self.drag = 0.05\n        self.respawning = 0\n\n        # Mark that we are respawning.\n        self.respawn()\n\n    def respawn(self):\n        \"\"\"\n        Called when we die and need to make a new ship.\n        'respawning' is an invulnerability timer.\n        \"\"\"\n        # If we are in the middle of respawning, this is non-zero.\n        self.respawning = 1\n        self.center_x = SCREEN_WIDTH / 2\n        self.center_y = SCREEN_HEIGHT / 2\n        self.angle = 0\n\n    def update(self):\n        \"\"\"\n        Update our position and other particulars.\n        \"\"\"\n        if self.respawning:\n            self.respawning += 1\n            self.alpha = self.respawning\n            if self.respawning > 250:\n                self.respawning = 0\n                self.alpha = 255\n        if self.speed > 0:\n            self.speed -= self.drag\n            if self.speed < 0:\n                self.speed = 0\n\n        if self.speed < 0:\n            self.speed += self.drag\n            if self.speed > 0:\n                self.speed = 0\n\n        self.speed += self.thrust\n        if self.speed > self.max_speed:\n            self.speed = self.max_speed\n        if self.speed < -self.max_speed:\n            self.speed = -self.max_speed\n\n        self.change_x = -math.sin(math.radians(self.angle)) * self.speed\n        self.change_y = math.cos(math.radians(self.angle)) * self.speed\n\n        self.center_x += self.change_x\n        self.center_y += self.change_y\n\n        # If the ship goes off-screen, move it to the other side of the window\n        if self.right < 0:\n            self.left = SCREEN_WIDTH\n\n        if self.left > SCREEN_WIDTH:\n            self.right = 0\n\n        if self.bottom < 0:\n            self.top = SCREEN_HEIGHT\n\n        if self.top > SCREEN_HEIGHT:\n            self.bottom = 0\n\n        \"\"\" Call the parent class. \"\"\"\n        super().update()\n\n\nclass AsteroidSprite(arcade.Sprite):\n    \"\"\" Sprite that represents an asteroid. \"\"\"\n\n    def __init__(self, image_file_name, scale):\n        super().__init__(image_file_name, scale=scale)\n        self.size = 0\n\n    def update(self):\n        \"\"\" Move the asteroid around. \"\"\"\n        super().update()\n        if self.center_x < LEFT_LIMIT:\n            self.center_x = RIGHT_LIMIT\n        if self.center_x > RIGHT_LIMIT:\n            self.center_x = LEFT_LIMIT\n        if self.center_y > TOP_LIMIT:\n            self.center_y = BOTTOM_LIMIT\n        if self.center_y < BOTTOM_LIMIT:\n            self.center_y = TOP_LIMIT\n\n\nclass MyGame(arcade.Window):\n    \"\"\" Main application class. \"\"\"\n\n    def __init__(self):\n        super().__init__(SCREEN_WIDTH, SCREEN_HEIGHT, SCREEN_TITLE)\n\n        # Set the working directory (where we expect to find files) to the same\n        # directory this .py file is in. You can leave this out of your own\n        # code, but it is needed to easily run the examples using \"python -m\"\n        # as mentioned at the top of this program.\n        file_path = os.path.dirname(os.path.abspath(__file__))\n        os.chdir(file_path)\n\n        self.frame_count = 0\n\n        self.game_over = False\n\n        # Sprite lists\n        self.player_sprite_list = arcade.SpriteList()\n        self.asteroid_list = arcade.SpriteList()\n        self.bullet_list = arcade.SpriteList()\n\n        # Set up the player\n        self.score = 0\n        self.player_sprite = None\n        self.lives = 0\n\n        # Sounds\n        # TODO: load sounds\n\n    def start_new_game(self):\n        \"\"\" Set up the game and initialize the variables. \"\"\"\n\n        self.frame_count = 0\n        self.game_over = False\n\n        # Sprite lists\n        self.player_sprite_list = arcade.SpriteList()\n        self.asteroid_list = arcade.SpriteList()\n        self.bullet_list = arcade.SpriteList()\n\n        # Set up the player\n        self.score = 0\n        self.player_sprite = ShipSprite(\":resources:images/space_shooter/playerShip1_orange.png\", SCALE)\n        self.player_sprite_list.append(self.player_sprite)\n        self.lives = 0\n\n        # ToDo: Set up the little icons that represent the player lives.\n\n        # Make the asteroids\n        image_list = (\":resources:images/space_shooter/meteorGrey_big1.png\",\n                      \":resources:images/space_shooter/meteorGrey_big2.png\",\n                      \":resources:images/space_shooter/meteorGrey_big3.png\",\n                      \":resources:images/space_shooter/meteorGrey_big4.png\")\n        for i in range(STARTING_ASTEROID_COUNT):\n            image_no = random.randrange(4)\n            enemy_sprite = AsteroidSprite(image_list[image_no], SCALE)\n            enemy_sprite.guid = \"Asteroid\"\n\n            enemy_sprite.center_y = random.randrange(BOTTOM_LIMIT, TOP_LIMIT)\n            enemy_sprite.center_x = random.randrange(LEFT_LIMIT, RIGHT_LIMIT)\n\n            enemy_sprite.change_x = random.random() * 2 - 1\n            enemy_sprite.change_y = random.random() * 2 - 1\n\n            enemy_sprite.change_angle = (random.random() - 0.5) * 2\n            enemy_sprite.size = 4\n            self.asteroid_list.append(enemy_sprite)\n\n    def on_draw(self):\n        \"\"\"\n        Render the screen.\n        \"\"\"\n\n        # This command has to happen before we start drawing\n        arcade.start_render()\n\n        # Draw all the sprites.\n        self.asteroid_list.draw()\n        self.bullet_list.draw()\n        self.player_sprite_list.draw()\n\n        # Put the text on the screen.\n        output = f\"Score: {self.score}\"\n        arcade.draw_text(output, 10, 70, arcade.color.WHITE, 13)\n\n        output = f\"Asteroid Count: {len(self.asteroid_list)}\"\n        arcade.draw_text(output, 10, 50, arcade.color.WHITE, 13)\n\n    def on_key_press(self, symbol, modifiers):\n        \"\"\" Called whenever a key is pressed. \"\"\"\n        if not self.player_sprite.respawning and symbol == arcade.key.SPACE:\n            # TODO: # Shoot if the player hit the space bar and we aren't respawning.\n            pass\n\n        if symbol == arcade.key.LEFT:\n            self.player_sprite.change_angle = 3\n        elif symbol == arcade.key.RIGHT:\n            self.player_sprite.change_angle = -3\n        elif symbol == arcade.key.UP:\n            self.player_sprite.thrust = 0.15\n        elif symbol == arcade.key.DOWN:\n            self.player_sprite.thrust = -.2\n\n    def on_key_release(self, symbol, modifiers):\n        \"\"\" Called whenever a key is released. \"\"\"\n        if symbol == arcade.key.LEFT:\n            self.player_sprite.change_angle = 0\n        elif symbol == arcade.key.RIGHT:\n            self.player_sprite.change_angle = 0\n        elif symbol == arcade.key.UP:\n            self.player_sprite.thrust = 0\n        elif symbol == arcade.key.DOWN:\n            self.player_sprite.thrust = 0\n\n    def split_asteroid(self, asteroid: AsteroidSprite):\n        \"\"\" Split an asteroid into chunks. \"\"\"\n        x = asteroid.center_x\n        y = asteroid.center_y\n        self.score += 1\n\n        if asteroid.size == 4:\n            for i in range(3):\n                image_no = random.randrange(2)\n                image_list = [\":resources:images/space_shooter/meteorGrey_med1.png\",\n                              \":resources:images/space_shooter/meteorGrey_med2.png\"]\n\n                enemy_sprite = AsteroidSprite(image_list[image_no],\n                                              SCALE * 1.5)\n\n                enemy_sprite.center_y = y\n                enemy_sprite.center_x = x\n\n                enemy_sprite.change_x = random.random() * 2.5 - 1.25\n                enemy_sprite.change_y = random.random() * 2.5 - 1.25\n\n                enemy_sprite.change_angle = (random.random() - 0.5) * 2\n                enemy_sprite.size = 3\n\n                self.asteroid_list.append(enemy_sprite)\n\n        elif asteroid.size == 3:\n            for i in range(3):\n                image_no = random.randrange(2)\n                image_list = [\":resources:images/space_shooter/meteorGrey_small1.png\",\n                              \":resources:images/space_shooter/meteorGrey_small2.png\"]\n\n                enemy_sprite = AsteroidSprite(image_list[image_no],\n                                              SCALE * 1.5)\n\n                enemy_sprite.center_y = y\n                enemy_sprite.center_x = x\n\n                enemy_sprite.change_x = random.random() * 3 - 1.5\n                enemy_sprite.change_y = random.random() * 3 - 1.5\n\n                enemy_sprite.change_angle = (random.random() - 0.5) * 2\n                enemy_sprite.size = 2\n\n                self.asteroid_list.append(enemy_sprite)\n\n        elif asteroid.size == 2:\n            for i in range(3):\n                image_no = random.randrange(2)\n                image_list = [\":resources:images/space_shooter/meteorGrey_tiny1.png\",\n                              \":resources:images/space_shooter/meteorGrey_tiny2.png\"]\n\n                enemy_sprite = AsteroidSprite(image_list[image_no],\n                                              SCALE * 1.5)\n\n                enemy_sprite.center_y = y\n                enemy_sprite.center_x = x\n\n                enemy_sprite.change_x = random.random() * 3.5 - 1.75\n                enemy_sprite.change_y = random.random() * 3.5 - 1.75\n\n                enemy_sprite.change_angle = (random.random() - 0.5) * 2\n                enemy_sprite.size = 1\n\n                self.asteroid_list.append(enemy_sprite)\n\n        elif asteroid.size == 1:\n            pass\n\n    def on_update(self, x):\n        \"\"\" Move everything \"\"\"\n\n        self.frame_count += 1\n\n        if not self.game_over:\n            self.asteroid_list.update()\n            self.player_sprite_list.update()\n\n            if not self.player_sprite.respawning:\n                asteroids = arcade.check_for_collision_with_list(self.player_sprite, self.asteroid_list)\n                if len(asteroids) > 0:\n                    if self.lives > 0:\n                        self.lives -= 1\n                        self.player_sprite.respawn()\n                        self.split_asteroid(cast(AsteroidSprite, asteroids[0]))\n                        asteroids[0].remove_from_sprite_lists()\n                        print(\"Crash\")\n                    else:\n                        self.game_over = True\n                        print(\"Game over\")\n\n\ndef main():\n    \"\"\" Start the game \"\"\"\n    window = MyGame()\n    window.start_new_game()\n    arcade.run()\n\n\nif __name__ == \"__main__\":\n    main()\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- asteroids.py	(revision ecc314f49725af15341ace99d80c2d8b4554a436)
+++ asteroids.py	(date 1603456567345)
@@ -14,16 +14,6 @@
 import arcade
 import os
 
-"""Julius"""
-"""Lea"""
-"""Laura"""
-"""Merle"""
-"""Merle"""
-"""Basti"""
-"""Annika"""
-"""Valentina"""
-
-
 from typing import cast
 
 STARTING_ASTEROID_COUNT = 3
Index: .idea/Asteroids_Team_All-Mann.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<module type=\"PYTHON_MODULE\" version=\"4\">\n  <component name=\"NewModuleRootManager\">\n    <content url=\"file://$MODULE_DIR$\">\n      <excludeFolder url=\"file://$MODULE_DIR$/venv\" />\n    </content>\n    <orderEntry type=\"jdk\" jdkName=\"Python 3.8 (Asteroids_Team_All-Mann)\" jdkType=\"Python SDK\" />\n    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\n  </component>\n  <component name=\"PyDocumentationSettings\">\n    <option name=\"format\" value=\"PLAIN\" />\n    <option name=\"myDocStringFormat\" value=\"Plain\" />\n  </component>\n</module>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/Asteroids_Team_All-Mann.iml	(revision ecc314f49725af15341ace99d80c2d8b4554a436)
+++ .idea/Asteroids_Team_All-Mann.iml	(date 1603132629824)
@@ -4,7 +4,7 @@
     <content url="file://$MODULE_DIR$">
       <excludeFolder url="file://$MODULE_DIR$/venv" />
     </content>
-    <orderEntry type="jdk" jdkName="Python 3.8 (Asteroids_Team_All-Mann)" jdkType="Python SDK" />
+    <orderEntry type="jdk" jdkName="Python 3.8" jdkType="Python SDK" />
     <orderEntry type="sourceFolder" forTests="false" />
   </component>
   <component name="PyDocumentationSettings">
